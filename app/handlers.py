from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile

import os
import time
import aiohttp

from dotenv import load_dotenv
from typing import Optional, Dict

from load import city_data
import app.keyboards as kb
from app.db.requests import set_user


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv('other/.env')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
WEATHER_TOKEN = os.getenv('WEATHER_TOKEN')
router = Router()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RequestWeather(StatesGroup):
    location_user = State()
    request_weather_one_day = State()
    request_weather = State()
    forecast_for_one_city = State()
    forecast_for_more_cities = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.message(CommandStart())
async def command_start(message: Message):
    await set_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Meteorology Explorer. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ.",
        reply_markup=kb.main_menu)

# –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def request_commands(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def get_contacts(message: Message):
    await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: meteoexplorersupprt@inbox.ru\n\n"
                         "Telegram: t.me/VRN_stormchaser\n"
                         "YouTube: youtube.com/channel/UCiTDX0L17kd17lQlNmJjigQ\n")

@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
async def get_forecast_loc(message: Message, state: FSMContext):
    await state.set_state(RequestWeather.location_user)
    await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã",
                         reply_markup=kb.share_location)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RequestWeather.location_user, F.location)
async def get_fast_weather(message: Message, state: FSMContext):
    async def get_weather_by_coords(lt: float, ln: float, api_key: str) -> Optional[Dict]:
        base_url = "http://api.weatherapi.com/v1/current.json"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
        params = {
            'key': api_key,
            'q': f"{lt},{ln}",
            'lang': 'ru'
        }

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async with aiohttp.ClientSession() as session:
                async with session.get(base_url, params=params) as rp:
                    rp.raise_for_status()
                    data = await rp.json()

                    current = data['current']
                    location = data['location']

                    # –í–æ–∑–≤—Ä–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                    return {
                        'city': location['name'],
                        'region': location['region'],
                        'country': location['country'],
                        'temp': current['temp_c'],
                        'feels_like': current['feelslike_c'],
                        'condition': current['condition']['text'],
                        'humidity': current['humidity'],
                        'wind_kph': current['wind_kph'],
                        'wind_dir': current['wind_dir'],
                        'pressure_mb': current['pressure_mb'],
                        'precip_mm': current['precip_mm'],
                        'cloud': current['cloud'],
                        'last_updated': current['last_updated']}

        except Exception:
            raise

    loc = message.location
    lat = loc.latitude
    lon = loc.longitude

    await state.update_data(loc=loc)
    try:
        weather_data = await get_weather_by_coords(lat, lon, WEATHER_TOKEN)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
        if weather_data:
            response = (f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {weather_data['city']}, {weather_data['region']}:\n\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather_data['feels_like']}¬∞C)\n"
                        f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_data['condition']}\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                        f"üå¨ –í–µ—Ç–µ—Ä: {weather_data['wind_kph']} –∫–º/—á, {weather_data['wind_dir']}\n"
                        f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather_data['last_updated']}")
        else:
            response = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"

        await message.answer(response)

    except Exception:
        raise

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)
    await state.clear()

# –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø—Ü–∏—è–º
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=kb.main_menu)

# –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 1 –¥–µ–Ω—å –ø–æ –≤–≤–æ–¥—É
@router.callback_query(F.data == "get_weather_one")
async def request_one_day(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RequestWeather.request_weather_one_day)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(RequestWeather.request_weather_one_day)
async def weather_one_day(message: Message, state: FSMContext):
    await state.update_data(request_weather_one_day=message.text)
    tg_data = await state.get_data()

    # Url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_TOKEN}&q={tg_data}&days={1}&lang=ru"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                location = data["location"]["name"]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                for day in data["forecast"]["forecastday"]:
                    date = day["date"]
                    max_temp = day["day"]["maxtemp_c"]
                    min_temp = day["day"]["mintemp_c"]
                    condition = day["day"]["condition"]["text"]
                    forecast_text = (
                        f"üìÖ {date}:\n–ú–∞–∫—Å: {max_temp}¬∞C\n–ú–∏–Ω: {min_temp}¬∞C\n–ü–æ–≥–æ–¥–∞: {condition}")

                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ
                await message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1 –¥–µ–Ω—å –¥–ª—è –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ {location}: \n\n{forecast_text}")
            else:

                await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)
    await state.clear()

# –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –ø–æ –≤–≤–æ–¥—É
@router.callback_query(F.data == "get_weather")
async def get_weather(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RequestWeather.request_weather)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(RequestWeather.request_weather)
async def weather(message: Message, state: FSMContext):
    await state.update_data(request_weather=message.text)
    tg_data = await state.get_data()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    forecasts = []

    # Url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ
    url = f"http://api.weatherapi.com/v1/forecast.json?key={WEATHER_TOKEN}&q={tg_data}&days={3}&lang=ru"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                location = data["location"]["name"]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
                for day in data["forecast"]["forecastday"]:
                    date = day["date"]
                    max_temp = day["day"]["maxtemp_c"]
                    min_temp = day["day"]["mintemp_c"]
                    condition = day["day"]["condition"]["text"]
                    forecast_text = (
                        f"üìÖ {date}:\n–ú–∞–∫—Å: {max_temp}¬∞C\n–ú–∏–Ω: {min_temp}¬∞C\n–ü–æ–≥–æ–¥–∞: {condition}")

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Å–∏–≤
                    forecasts.append(forecast_text)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
                await message.answer(
                f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {3} –¥–Ω—è –¥–ª—è –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ {location}:\n\n{f'{chr(10)}{chr(10)}'.join(forecasts)}")
            else:
                await message.answer(f"–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)
    await state.clear()

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç –ì–ú–¶ –¥–ª—è 1 –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
@router.callback_query(F.data == "gmc_forecast")
async def get_gmc_forecast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RequestWeather.forecast_for_one_city)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RequestWeather.forecast_for_one_city)
async def gmc_forecast(message: Message, state: FSMContext):
    await state.update_data(forecast_for_one_city=message.text)
    tg_data = await state.get_data()

    # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á—ë—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
    start_time = time.time()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    weather_city = tg_data['forecast_for_one_city']
    city_name = weather_city.strip().upper()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ city_data
    city_info = next((city for city in city_data if city['eng_name'] == city_name), None)

    if city_info:
        city_url = city_info['url']

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async with aiohttp.ClientSession() as session:
                async with session.get(city_url) as response:
                    if response.status == 200:

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        image_data = await response.read()
                        temp_file = f"images/temp_{city_name.lower()}.png"

                        # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        with open(temp_file, 'wb') as f:
                            f.write(image_data)

                        # –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
                        end_time = time.time()
                        elapsed_time = end_time - start_time

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
                        await message.answer_photo(
                            photo=FSInputFile(temp_file),
                            caption=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {city_name.capitalize()}"
                            f"\n–í—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                    else:
                        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)
    await state.clear()

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç –ì–ú–¶ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
@router.callback_query(F.data == "gmc_forecast_more")
async def get_forecast_for_more_cities(callback: CallbackQuery, state:FSMContext):
    await state.set_state(RequestWeather.forecast_for_more_cities)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (‚ö†Ô∏è–ú–∞–∫—Å–∏–º—É–º 10 –≥–æ—Ä–æ–¥–æ–≤)")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
@router.message(RequestWeather.forecast_for_more_cities)
async def set_forecast_for_more_cities(message: Message, state: FSMContext):
    await state.update_data(forecast_for_more_cities=message.text)

    # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á—ë—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
    start_time = time.time()
    tg_data = await state.get_data()

    # –†–∞–±–æ—Ç–∞ —Å –≤–≤–æ–¥–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    weather_city = tg_data['forecast_for_more_cities']
    cities = [city.strip().upper() for city in weather_city.split(',') if city.strip()]
    cities = cities[:10]

    if not cities:
        await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ city_data
    for city_name in cities:
        city_info = next((city for city in city_data if city['eng_name'] == city_name), None)

        if city_info:
            city_url = city_info['url']

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(city_url) as response:
                        if response.status == 200:

                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            image_data = await response.read()
                            temp_file = f"images/temp_{city_name.lower()}.png"

                            # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            with open(temp_file, 'wb') as f:
                                f.write(image_data)

                            # –ü–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
                            end_time = time.time()
                            elapsed_time = end_time - start_time

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
                            await message.answer_photo(
                                photo=FSInputFile(temp_file),
                                caption=f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {city_name.capitalize()}"
                                        f"\n–í—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                        else:
                            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö!")

            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_menu)
    await state.clear()
